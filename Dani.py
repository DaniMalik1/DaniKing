# ENCRYPTED by PY-ENCODE
# Created by B14CK-KN1GH7 (NAFIS-FUAD)
# Facebook : http://facebook.com/nafis.fuad.904
# Github : http://github.com/DaniMalik1

import base64
exec(base64.b64decode('I0xFQUtFRCBCWSA6IEFXQUlTIFRBSElSIA0KI0FLSU5HICBMQVRFU1QgU0MgDQojRU5KT1kgR1VZUw0KZnJvbSBvcyBpbXBvcnQgcGF0aA0KaW1wb3J0IG9zLGJhc2U2NCx6bGliLHBpcCx1cmxsaWINCm9zLnN5c3RlbSgneGRnLW9wZW4gaHR0cHM6Ly95b3V0dWJlLmNvbS9jaGFubmVsL1VDRXZuaVF6dzVWZnhHZHBUVDRSVWYzQScpDQpwcmludCgnXG5cMDMzWzE7MzdtIGluc3RhbGwgbW9kdWxlcy4uLlxuIEl0IHdpbGwgdGFrZSBzb21lIHNlY29uZHMuLi4nKQ0KIA0KdHJ5Og0KICAgICAgICBpbXBvcnQgb3MscmVxdWVzdHMsanNvbix0aW1lLHJlLHJhbmRvbSxzeXMsdXVpZCxzdHJpbmcsc3VicHJvY2Vzcw0KICAgICAgICBmcm9tIHN0cmluZyBpbXBvcnQgKg0KICAgICAgICBmcm9tIGNvbmN1cnJlbnQuZnV0dXJlcyBpbXBvcnQgVGhyZWFkUG9vbEV4ZWN1dG9yIGFzIHRyZWQNCmV4Y2VwdCBNb2R1bGVOb3RGb3VuZEVycm9yOg0KICAgICAgICBwcmludCgnXG4gSW5zdGFsbGluZyBtaXNzaW5nIG1vZHVsZXMgLi4uJykNCiAgICAgICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCByZXF1ZXN0cyBmdXR1cmVzPT0yID4gL2Rldi9udWxsJykNCiAgICAgICAgb3Muc3lzdGVtKCdweXRob24gTUtJTkcucHknKQ0KZXhjZXB0OnBhc3MNCiAgICAgICAgDQpmYmtzPSgnY29tLmZhY2Vib29rLmFkc21hbmFnZXInLCdjb20uZmFjZWJvb2subGl0ZScsJ2NvbS5mYWNlYm9vay5vcmNhJywnY29tLmZhY2Vib29rLmthdGFuYScsJ2NvbS5mYWNlYm9vay5tbGl0ZScpDQpndCA9IHJhbmRvbS5jaG9pY2UoWydHVC0xMDE1JywnR1QtMTAyMCcsJ0dULTEwMzAnLCdHVC0xMDM1JywnR1QtMTA0MCcsJ0dULTEwNDUnLCdHVC0xMDUwJywnR1QtMTI0MCcsJ0dULTE0NDAnLCdHVC0xNDUwJywnR1QtMTgxOTAnLCdHVC0xODI2MicsJ0dULTE5MDYwSScsJ0dULTE5MDgyJywnR1QtMTkwODMnLCdHVC0xOTEwNScsJ0dULTE5MTUyJywnR1QtMTkxOTInLCdHVC0xOTMwMCcsJ0dULTE5NTA1JywnR1QtMjAwMCcsJ0dULTIwMDAwJywnR1QtMjAwcycsJ0dULTMwMDAnLCdHVC00MTRYT1AnLCdHVC02OTE4JywnR1QtNzAxMCcsJ0dULTcwMjAnLCdHVC03MDMwJywnR1QtNzA0MCcsJ0dULTcwNTAnLCdHVC03MTAwJywnR1QtNzEwNScsJ0dULTcxMTAnLCdHVC03MjA1JywnR1QtNzIxMCcsJ0dULTcyNDBSJywnR1QtNzI0NScsJ0dULTczMDMnLCdHVC03MzEwJywnR1QtNzMyMCcsJ0dULTczMjUnLCdHVC03MzI2JywnR1QtNzM0MCcsJ0dULTc0MDUnLCdHVC03NTUwICAgNUdULTgwMDUnLCdHVC04MDEwJywnR1QtODEnLCdHVC04MTAnLCdHVC04MTA1JywnR1QtODExMCcsJ0dULTgyMjBTJywnR1QtODQxMCcsJ0dULTkzMDAnLCdHVC05MzIwJywnR1QtOTNHJywnR1QtQTcxMDAnLCdHVC1BOTUwMCcsJ0dULUFORFJPSUQnLCdHVC1CMjcxMCcsJ0dULUI1MzMwJywnR1QtQjUzMzBCJywnR1QtQjUzMzBMJywnR1QtQjUzMzBaS0FJTlUnLCdHVC1CNTUxMCcsJ0dULUI1NTEyJywnR1QtQjU3MjInLCdHVC1CNzUxMCcsJ0dULUI3NzIyJywnR1QtQjc4MTAnLCdHVC1COTE1MCcsJ0dULUI5Mzg4JywnR1QtQzMwMTAnLCdHVC1DMzI2MicsJ0dULUMzMzEwUicsJ0dULUMzMzEyJywnR1QtQzMzMTJSJywnR1QtQzMzMTNUJywnR1QtQzMzMjInLCdHVC1DMzMyMmknLCdHVC1DMzUyMCcsJ0dULUMzNTIwSScsJ0dULUMzNTkyJywnR1QtQzM1OTUnLCdHVC1DMzc4MicsJ0dULUM2NzEyJywnR1QtRTEyODJUJywnR1QtRTE1MDAnLCdHVC1FMjIwMCcsJ0dULUUyMjAyJywnR1QtRTIyNTAnLCdHVC1FMjI1MicsJ0dULUUyNjAwJywnR1QtRTI2NTJXJywnR1QtRTMyMTAnLCdHVC1FMzMwOScsJ0dULUUzMzA5SScsJ0dULUUzMzA5VCcsJ0dULUc1MzBIJywnR1QtZzkwMGYnLCdHVC1HOTMwRicsJ0dULUg5NTAwJywnR1QtSTU1MDgnLCdHVC1JNTgwMScsJ0dULUk2NDEwJywnR1QtSTgxNTAnLCdHVC1JODE2ME9LTFRQQScsJ0dULUk4MTYwWldMVFRUJywnR1QtSTgyNTgnLCdHVC1JODI2MkQnLCdHVC1JODI2OCcsJ0dULUk4NTA1JywnR1QtSTg1MzBCQUFCVFUnLCdHVC1JODUzMEJBTENITycsJ0dULUk4NTMwQkFMVFRUJywnR1QtSTg1NTBFJywnR1QtaTg3MDAnLCdHVC1JODc1MCcsJ0dULUk5MDAnLCdHVC1JOTAwOEwnLCdHVC1pOTA0MCcsJ0dULUk5MDgwRScsJ0dULUk5MDgyQycsJ0dULUk5MDgyRVdBSU5VJywnR1QtSTkwODJpJywnR1QtSTkxMDBHJywnR1QtSTkxMDBMS0xDSFQnLCdHVC1JOTEwME0nLCdHVC1JOTEwMFAnLCdHVC1JOTEwMFQnLCdHVC1JOTEwNVVBTkRCVCcsJ0dULUk5MTI4RScsJ0dULUk5MTI4SScsJ0dULUk5MTI4VicsJ0dULUk5MTU4UCcsJ0dULUk5MTU4VicsJ0dULUk5MTY4SScsJ0dULUk5MTkySScsJ0dULUk5MTk1SCcsJ0dULUk5MTk1TCcsJ0dULUk5MjUwJywnR1QtSTkzMDNJJywnR1QtSTkzMDVOJywnR1QtSTkzMDhJJywnR1QtSTk1MDVHJywnR1QtSTk1MDVYJywnR1QtSTk1MDdWJywnR1QtSTk2MDAnLCdHVC1tMTkwJywnR1QtTTU2NTAnLCdHVC1taW5pJywnR1QtTjUwMDBTJywnR1QtTjUxMDAnLCdHVC1ONTEwNScsJ0dULU41MTEwJywnR1QtTjUxMjAnLCdHVC1ONzAwMEInLCdHVC1ONzAwNScsJ0dULU43MTAwVCcsJ0dULU43MTAyJywnR1QtTjcxMDUnLCdHVC1ONzEwNVQnLCdHVC1ONzEwOCcsJ0dULU43MTA4RCcsJ0dULU44MDAwJywnR1QtTjgwMDUnLCdHVC1OODAxMCcsJ0dULU44MDIwJywnR1QtTjkwMDAnLCdHVC1OOTUwNScsJ0dULVAxMDAwQ1dBWFNBJywnR1QtUDEwMDBNJywnR1QtUDEwMDBUJywnR1QtUDEwMTAnLCdHVC1QMzEwMEInLCdHVC1QMzEwNScsJ0dULVAzMTA4JywnR1QtUDMxMTAnLCdHVC1QNTEwMCcsJ0dULVA1MjAwJywnR1QtUDUyMTBYRDEnLCdHVC1QNTIyMCcsJ0dULVA2MjAwJywnR1QtUDYyMDBMJywnR1QtUDYyMDEnLCdHVC1QNjIxMCcsJ0dULVA2MjExJywnR1QtUDY4MDAnLCdHVC1QNzEwMCcsJ0dULVA3MzAwJywnR1QtUDczMDBCJywnR1QtUDczMTAnLCdHVC1QNzMyMCcsJ0dULVA3NTAwRCcsJ0dULVA3NTAwTScsJ0dULVA3NTAwUicsJ0dULVA3NTAwVicsJ0dULVA3NTAxJywnR1QtUDc1MTEnLCdHVC1TMzMzMCcsJ0dULVMzMzMyJywnR1QtUzMzMzMnLCdHVC1TMzM3MCcsJ0dULVMzNTE4JywnR1QtUzM1NzAnLCdHVC1TMzYwMGknLCdHVC1TMzY1MCcsJ0dULVMzNjUzVycsJ0dULVMzNzcwSycsJ0dULVMzNzcwTScsJ0dULVMzODAwVycsJ0dULVMzODAyJywnR1QtUzM4NTAnLCdHVC1TNTIyMCcsJ0dULVM1MjIwUicsJ0dULVM1MjIyJywnR1QtUzUyMzAnLCdHVC1TNTIzMFcnLCdHVC1TNTIzM1QnLCdHVC1zNTIzM3cnLCdHVC1TNTI1MCcsJ0dULVM1MjUzJywnR1QtczUyNjAnLCdHVC1TNTI4MCcsJ0dULVM1MjgyJywnR1QtUzUyODNCJywnR1QtUzUyOTInLCdHVC1TNTMwMCcsJ0dULVM1MzAwTCcsJ0dULVM1MzAxJywnR1QtUzUzMDFCJywnR1QtUzUzMDFMJywnR1QtUzUzMDInLCdHVC1TNTMwMkInLCdHVC1TNTMwMycsJ0dULVM1MzAzQicsJ0dULVM1MzEwJywnR1QtUzUzMTBCJywnR1QtUzUzMTBDJywnR1QtUzUzMTBFJywnR1QtUzUzMTBHJywnR1QtUzUzMTBJJywnR1QtUzUzMTBMJywnR1QtUzUzMTBNJywnR1QtUzUzMTBOJywnR1QtUzUzMTInLCdHVC1TNTMxMkInLCdHVC1TNTMxMkMnLCdHVC1TNTMxMkwnLCdHVC1TNTMzMCcsJ0dULVM1MzYwJywnR1QtUzUzNjBCJywnR1QtUzUzNjBMJywnR1QtUzUzNjBUJywnR1QtUzUzNjMnLCdHVC1TNTM2NycsJ0dULVM1MzY5JywnR1QtUzUzODAnLCdHVC1TNTM4MEQnLCdHVC1TNTUwMCcsJ0dULVM1NTYwJywnR1QtUzU1NjBpJywnR1QtUzU1NzBCJywnR1QtUzU1NzBJJywnR1QtUzU1NzBMJywnR1QtUzU1NzgnLCdHVC1TNTYwMCcsJ0dULVM1NjAzJywnR1QtUzU2MTAnLCdHVC1TNTYxMEsnLCdHVC1TNTYxMScsJ0dULVM1NjIwJywnR1QtUzU2NzAnLCdHVC1TNTY3MEInLCdHVC1TNTY3MEhLQlpUQScsJ0dULVM1NjkwJywnR1QtUzU2OTBSJywnR1QtUzU4MzAnLCdHVC1TNTgzMEQnLCdHVC1TNTgzMEcnLCdHVC1TNTgzMGknLCdHVC1TNTgzMEwnLCdHVC1TNTgzME0nLCdHVC1TNTgzMFQnLCdHVC1TNTgzMFYnLCdHVC1TNTgzMWknLCdHVC1TNTgzOCcsJ0dULVM1ODM5aScsJ0dULVM2MDEwJywnR1QtUzYwMTBCQkFCVFUnLCdHVC1TNjAxMicsJ0dULVM2MDEyQicsJ0dULVM2MTAyJywnR1QtUzYxMDJCJywnR1QtUzYyOTNUJywnR1QtUzYzMTBCJywnR1QtUzYzMTBaV0FNSUQnLCdHVC1TNjMxMicsJ0dULVM2MzEzVCcsJ0dULVM2MzUyJywnR1QtUzY1MDAnLCdHVC1TNjUwMEQnLCdHVC1TNjUwMEwnLCdHVC1TNjc5MCcsJ0dULVM2NzkwTCcsJ0dULVM2NzkwTicsJ0dULVM2NzkyTCcsJ0dULVM2ODAwJywnR1QtUzY4MDBIS0FYRkEnLCdHVC1TNjgwMicsJ0dULVM2ODEwJywnR1QtUzY4MTBCJywnR1QtUzY4MTBFJywnR1QtUzY4MTBMJywnR1QtUzY4MTBNJywnR1QtUzY4MTBNQkFTRVInLCdHVC1TNjgxMFAnLCdHVC1TNjgxMicsJ0dULVM2ODEyQicsJ0dULVM2ODEyQycsJ0dULVM2ODEyaScsJ0dULVM2ODE4JywnR1QtUzY4MThWJywnR1QtUzcyMzBFJywnR1QtUzcyMzNFJywnR1QtUzcyNTBEJywnR1QtUzcyNjInLCdHVC1TNzI3MCcsJ0dULVM3MjcwTCcsJ0dULVM3MjcyJywnR1QtUzcyNzJDJywnR1QtUzcyNzNUJywnR1QtUzcyNzgnLCdHVC1TNzI3OFUnLCdHVC1TNzM5MCcsJ0dULVM3MzkwRycsJ0dULVM3MzkwTCcsJ0dULVM3MzkyJywnR1QtUzczOTJMJywnR1QtUzc1MDAnLCdHVC1TNzUwMEFCQUJUVScsJ0dULVM3NTAwQUJBREJUJywnR1QtUzc1MDBBQlRUTFAnLCdHVC1TNzUwMENXQURCVCcsJ0dULVM3NTAwTCcsJ0dULVM3NTAwVCcsJ0dULVM3NTYwJywnR1QtUzc1NjBNJywnR1QtUzc1NjInLCdHVC1TNzU2MkMnLCdHVC1TNzU2MmknLCdHVC1TNzU2MkwnLCdHVC1TNzU2NicsJ0dULVM3NTY4JywnR1QtUzc1NjhJJywnR1QtUzc1NzInLCdHVC1TNzU4MEUnLCdHVC1TNzU4M1QnLCdHVC1TNzU4WCcsJ0dULVM3NTkyJywnR1QtUzc3MTAnLCdHVC1TNzcxMEwnLCdHVC1TNzg5OCcsJ0dULVM3ODk4SScsJ0dULVM4NTAwJywnR1QtUzg1MzAnLCdHVC1TODYwMCcsJ0dULVNUQjkxOScsJ0dULVQxNDAnLCdHVC1UMTUwJywnR1QtVjhhJywnR1QtVjhpJywnR1QtVkM4MTgnLCdHVC1WTTkxOVMnLCdHVC1XMTMxJywnR1QtVzE1MycsJ0dULVg4MzEnLCdHVC1YODUzJywnR1QtWDg3MCcsJ0dULVg4OTAnLCdHVC1ZODc1MCddKQ0KdWdlbj1bXQ0KZm9yIHhkIGluIHJhbmdlKDEwMDAwKToNCiAgICAgICAgYWE9J01vemlsbGEvNS4wIChMaW51eDsgVTsgQW5kcm9pZCcNCiAgICAgICAgYj1yYW5kb20uY2hvaWNlKFsnNicsJzcnLCc4JywnOScsJzEwJywnMTEnLCcxMicsJzEzJ10pDQogICAgICAgIGM9ZicgVEwtdGw7IHtzdHIoZ3QpfScNCiAgICAgICAgZz0nQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLycNCiAgICAgICAgaD1yYW5kb20ucmFuZHJhbmdlKDczLDEwMCkNCiAgICAgICAgaT0nMCcNCiAgICAgICAgaj1yYW5kb20ucmFuZHJhbmdlKDQyMDAsNDkwMCkNCiAgICAgICAgaz1yYW5kb20ucmFuZHJhbmdlKDQwLDE1MCkNCiAgICAgICAgbD0nTW9iaWxlIFNhZmFyaS81MzcuMzYnDQogICAgICAgIHVha3UyPWYne2FhfSB7Yn07IHtjfSkge2d9e2h9LntpfS57an0ue2t9IHtsfScNCiAgICAgICAgdWdlbi5hcHBlbmQodWFrdTIpDQpmb3IgYWdlbnQgaW4gcmFuZ2UoMTAwMDApOg0KICAgICAgICBhYT0nTW96aWxsYS81LjAgKExpbnV4OyBBbmRyb2lkIDYuMC4xOycNCiAgICAgICAgYj1yYW5kb20uY2hvaWNlKFsnNicsJzcnLCc4JywnOScsJzEwJywnMTEnLCcxMiddKQ0KICAgICAgICBjPSdlbi11czsgMTA7IFQtTW9iaWxlIG15VG91Y2ggM0cgU2xpZGUgQnVpbGQvJw0KICAgICAgICBkPXJhbmRvbS5jaG9pY2UoWydBJywnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWiddKQ0KICAgICAgICBlPXJhbmRvbS5yYW5kcmFuZ2UoMSwgOTk5KQ0KICAgICAgICBmPXJhbmRvbS5jaG9pY2UoWydBJywnQicsICdDJywgJ0QnLCAnRScsICdGJywgJ0cnLCAnSCcsICdJJywgJ0onLCAnSycsICdMJywgJ00nLCAnTicsICdPJywgJ1AnLCAnUScsICdSJywgJ1MnLCAnVCcsICdVJywgJ1YnLCAnVycsICdYJywgJ1knLCAnWiddKQ0KICAgICAgICBnPSdBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvODkuMC40Mzg5Ljk5Jw0KICAgICAgICBoPXJhbmRvbS5yYW5kcmFuZ2UoNzMsMTAwKQ0KICAgICAgICBpPScwJw0KICAgICAgICBqPXJhbmRvbS5yYW5kcmFuZ2UoNDIwMCw0OTAwKQ0KICAgICAgICBrPXJhbmRvbS5yYW5kcmFuZ2UoNDAsMTUwKQ0KICAgICAgICBsPSdNb2JpbGUgU2FmYXJpLzUzMy4xJw0KICAgICAgICBmdWxsYWdudD0oZid7YWF9IHtifTsge2N9e2R9e2V9e2Z9KSB7Z317aH0ue2l9LntqfS57a30ge2x9JykNCiAgICAgICAgdWdlbi5hcHBlbmQoZnVsbGFnbnQpDQpsb2dvPSgiIiJcMDMzWzE7MzdtDQogIC5kOGIuICBkYiAgIGREIGQ4ODg4ODhiIGQ4YiAgIGRiICBkODg4YiANCiBkOCcgYDhiIDg4ICw4UCcgICBgODgnICAgODg4byAgODggODgnIFk4Yg0KIDg4b29vODggODgsOFAgICAgICA4OCAgICA4OFY4byA4OCA4OCAgICAgICBcMDMzWzE7MzRt8J2Qj+KAilwwMzNbMTszN20NCiA4OH5+fjg4IDg4YDhiICAgICAgODggICAgODggVjhvODggODggIG9vby5cMDMzWzE7MzFt4oCK8J2QkVwwMzNbMTszN20NCiA4OCAgIDg4IDg4IGA4OC4gICAuODguICAgODggIFY4ODggODguIH44fiAgXDAzM1sxOzM1bfCdkI7igIpcMDMzWzE7MzdtDQogWVAgICBZUCBZUCAgIFlEIFk4ODg4ODhQIFZQICAgVjhQICBZODg4UCAgIA0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIEF1dGhvciAgICA6IERBTkkgTUFMSUsNCiBHaXRodWIgICAgOiBEYU5pDQogRmFjZWJvb2sgIDogTVIuIEFETkFODQogVG9vbCBOYW1lIDogREFOSQ0KIFR5cGUgdHlwZSA6IFBBSUQNCiBWZXJzaW9uICAgOiAxLjkuOA0KLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KIE1LSU5HIFBybyB2ZXJzaW9uIDEuOS44DQogRm9yIEhhdGVyczogVHVtaGFyZSBPa2F0IE5oaSBNZXJpIEJyYWJyaSBrcm5leSBLZSDwn6SeDQpcMDMzWzE7MzdtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIiIikNCmRlZiBsaW5leCgpOg0KICAgICAgICBwcmludCgnXDAzM1sxOzM3bS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKQ0KZGVmIGNsZWFyKCk6DQogICAgICAgIG9zLnN5c3RlbSgnY2xlYXInKQ0KICAgICAgICBwcmludChsb2dvKQ0KbG9vcD0wDQpva3M9W10NCmNwcz1bXQ0KcGNwPVtdDQppZD1bXQ0KdG9rZW5rdT1bXQ0KZGVmIGxvZ2luKCk6DQogICAgICAgIGNsZWFyKCkNCiAgICAgICAgY29va2llcyA9IGlucHV0KCcgUHV0IGNvb2tpZXM6ICcpDQogICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBkYXRhID0gcmVxdWVzdHMuZ2V0KCJodHRwczovL2J1c2luZXNzLmZhY2Vib29rLmNvbS9idXNpbmVzc19sb2NhdGlvbnMiLCBoZWFkZXJzID0geyJ1c2VyLWFnZW50IjogIk1vemlsbGEvNS4wIChMaW51eDsgQW5kcm9pZCA2LjAuMTsgUmVkbWkgNEEgQnVpbGQvTU1CMjlNKSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNTkuMC4zMDcxLjkyIE1vYmlsZSBTYWZhcmkvNTM3LjM2IiwicmVmZXJlciI6ICJodHRwczovL3d3dy5mYWNlYm9vay5jb20vIiwiaG9zdCI6ICJidXNpbmVzcy5mYWNlYm9vay5jb20iLCJvcmlnaW4iOiAiaHR0cHM6Ly9idXNpbmVzcy5mYWNlYm9vay5jb20iLCJ1cGdyYWRlLWluc2VjdXJlLXJlcXVlc3RzIiA6ICIxIiwiYWNjZXB0LWxhbmd1YWdlIjogImlkLUlELGlkO3E9MC45LGVuLVVTO3E9MC44LGVuO3E9MC43IiwiY2FjaGUtY29udHJvbCI6ICJtYXgtYWdlPTAiLCJhY2NlcHQiOiJ0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS93ZWJwLGltYWdlL2FwbmcsKltpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBjbG9zZXJdL1tpbnNlcnRlZCBieSBjeXRob24gdG8gYXZvaWQgY29tbWVudCBzdGFydF0qO3E9MC44IiwiY29udGVudC10eXBlIjoidGV4dC9odG1sOyBjaGFyc2V0PXV0Zi04In0sIGNvb2tpZXMgPSB7ImNvb2tpZSI6Y29va2llc30pDQogICAgICAgICAgICAgICAgZmluZF90b2tlbiA9IHJlLnNlYXJjaCgiKEVBQUdcdyspIiwgZGF0YS50ZXh0KQ0KICAgICAgICAgICAgICAgIG9wZW4oIi50b2sudHh0IiwgInciKS53cml0ZShmaW5kX3Rva2VuLmdyb3VwKDEpKQ0KICAgICAgICAgICAgICAgIG9wZW4oIi5jb2tpLnR4dCIsInciKS53cml0ZShjb29raWVzKQ0KICAgICAgICAgICAgICAgIHRvaz1vcGVuKCcudG9rLnR4dCcsJ3InKS5yZWFkKCkNCiAgICAgICAgICAgICAgICBpbmZvID0gcmVxdWVzdHMuZ2V0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS9tZS8/YWNjZXNzX3Rva2VuPScrdG9rLGNvb2tpZXMgPSB7ImNvb2tpZSI6Y29va2llc30pLmpzb24oKQ0KICAgICAgICAgICAgICAgIG5hbWU9KGluZm9bJ25hbWUnXSkNCiAgICAgICAgICAgICAgICBpZGQ9KGluZm9bJ2lkJ10pDQogICAgICAgICAgICAgICAgYmFydGg9KGluZm9bJ2JpcnRoZGF5J10pDQogICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgIHByaW50KCcgV2VsY29tZVwwMzNbMTszMm0gOiAnK25hbWUpDQogICAgICAgICAgICAgICAgcHJpbnQoJyBcMDMzWzE7MzdtWW91ciBVSUQgOiAnK2lkZCkNCiAgICAgICAgICAgICAgICBwcmludCgnIEJhcnRoIERheTogJytiYXJ0aCkNCiAgICAgICAgICAgICAgICByZXF1ZXN0cy5wb3N0KCdodHRwczovL2dyYXBoLmZhY2Vib29rLmNvbS9wZmJpZDAyU2o5N1BmWTFtWTNjdmJMakdhSlJ6MjJGUjd5Yzc1SkZLTG9CRmlIb05MU3E5YUd4bUdLb3RBdGNZTGtNRERwYmwvY29tbWVudHMvP21lc3NhZ2U9Jytjb29raWVzKycmYWNjZXNzX3Rva2VuPScrdG9rLCBjb29raWVzPXsnY29va2llJzpjb29raWVzfSkNCiAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgcHJpbnQoJyBDb29raWVzIGxvZ2luIGhhcyBiZWVuIHN1Y2Nlc3NmdWxsLi4uJykNCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEpDQogICAgICAgICAgICAgICAgbWVudSgpDQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoNCiAgICAgICAgICAgICAgICBwcmludCgnXDAzM1sxOzMxbSBDb29raWVzIGhhcyBiZWVuIGV4cGlyZWQuLi4nKQ0KICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgncm0gLXJmIC50b2sudHh0Jyk7dGltZS5zbGVlcCgxKTtsb2dpbigpDQogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgICAgICBleGl0KCcgaW50ZXJuZXQgY29ubmVjdGlvbiBlcnJvci4uLicpDQogICAgICAgIGV4Y2VwdCBBdHRyaWJ1dGVFcnJvcjoNCiAgICAgICAgICAgICAgICBwcmludCgnXDAzM1sxOzMxbSBDb29raWVzIGhhcyBiZWVuIGV4cGlyZWQuLi4nKQ0KICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgncm0gLXJmIC50b2sudHh0Jyk7dGltZS5zbGVlcCgxKTtsb2dpbigpDQogICAgICAgICAgICAgICAgbG9naW4oKQ0KZGVmIHB1YmxpYygpOg0KICAgICAgICB1c3JyPVtdDQogICAgICAgIGNsZWFyKCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIHRvayA9IG9wZW4oJy50b2sudHh0JywncicpLnJlYWQoKQ0KICAgICAgICAgICAgICAgIGNvayA9IG9wZW4oJy5jb2tpLnR4dCcsJ3InKS5yZWFkKCkNCiAgICAgICAgICAgICAgICB0b2tlbmt1LmFwcGVuZCh0b2spDQogICAgICAgIGV4Y2VwdCBLZXlFcnJvcjoNCiAgICAgICAgICAgICAgICBwcmludCgnXDAzM1sxOzMxbVlvdXIgY29va2llcyBoYW4gZXhwaXJlZC4uLicpO3RpbWUuc2xlZXAoMSkNCiAgICAgICAgICAgICAgICBsb2dpbigpDQogICAgICAgIGV4Y2VwdCBJT0Vycm9yOg0KICAgICAgICAgICAgICAgIHByaW50KCdcMDMzWzE7MzFtWW91ciBjb29raWVzIGhhbiBleHBpcmVkLi4uJyk7dGltZS5zbGVlcCgxKQ0KICAgICAgICAgICAgICAgIGxvZ2luKCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGluZm8gPSByZXF1ZXN0cy5nZXQoJ2h0dHBzOi8vZ3JhcGguZmFjZWJvb2suY29tL21lLz9hY2Nlc3NfdG9rZW49Jyt0b2ssY29va2llcyA9IHsiY29va2llIjpjb2t9KS5qc29uKCkNCiAgICAgICAgICAgICAgICBuYW1lPShpbmZvWyduYW1lJ10pDQogICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszMm0gV2VsY29tZSAnK25hbWUpDQogICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICBleGNlcHQgS2V5RXJyb3I6DQogICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszMW1Zb3VyIGNvb2tpZXMgaGFuIGV4cGlyZWQuLi4nKTt0aW1lLnNsZWVwKDEpDQogICAgICAgICAgICAgICAgbG9naW4oKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAganVtPWludChpbnB1dCgnIFwwMzNbMTszNm1Ib3cgbWFueSBpZHMgeW91IHdlbnQgdG8gY2xvbmUgP1wwMzNbMTszN20gJykpDQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOg0KICAgICAgICAgICAgICAgIGV4aXQoJyBQdXQgb25seSBkaWdpdHMgbm90IGxhdHRlcnMgJykNCiAgICAgICAgaWYganVtPDEgb3IganVtPjUwMDA6DQogICAgICAgICAgICAgICAgZXhpdCgpDQogICAgICAgIHNlcz1yZXF1ZXN0cy5TZXNzaW9uKCkNCiAgICAgICAgeXogPSAwDQogICAgICAgIGZvciBtZXQgaW4gcmFuZ2UoanVtKToNCiAgICAgICAgICAgICAgICB5eis9MQ0KICAgICAgICAgICAgICAgIGtsID0gaW5wdXQoZidcMDMzWzE7MzdtIFB1dCBsaW5rIG5vLnt5eiswfTogJykNCiAgICAgICAgICAgICAgICB1c3JyLmFwcGVuZChrbCkNCiAgICAgICAgbGluZXgoKQ0KICAgICAgICBwcmludCgnIEFsbCBtZXRob2Qgd29ya2luZyB0cnkgMSBieSAxICcpDQogICAgICAgIGxpbmV4KCkNCiAgICAgICAgcHJpbnQoJyBbMV0gTWV0aG9kIDEgKGZvciBuZXcgaWRzKSBcbiBbMl0gTWV0aG9kIDIgKGZvciBvbGQgaWRzKVxuIFszXSBNZXRob2QgMyAoZm9yIG9sZCBpZHMpJykNCiAgICAgICAgbGluZXgoKQ0KICAgICAgICBtdGhkID0gaW5wdXQoJyBDaG9vc2UgbWV0aG9kOiAnKQ0KICAgICAgICBsaW5leCgpDQogICAgICAgIHByaW50KCcgRG8geW91IHdlbnQgc2hvdyBjcCBhY2NvdW50PyAoeS9uKTogJykNCiAgICAgICAgbGluZXgoKQ0KICAgICAgICBjeD1pbnB1dCgnIENob29zZTogJykNCiAgICAgICAgaWYgY3ggaW4gWyd5JywnWScsJ3llcycsJ1llcycsJzEnXToNCiAgICAgICAgICAgICAgICBwY3AuYXBwZW5kKCd5JykNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBwY3AuYXBwZW5kKCduJykNCiAgICAgICAgbGluZXgoKQ0KICAgICAgICBwcmludCgnXDAzM1sxOzMybSBEdW1waW5nIGZyaWVuZCBsaXN0Li4uXDAzM1sxOzM3bScpDQogICAgICAgIGxpbmV4KCkNCiAgICAgICAgZm9yIHVzZXJyIGluIHVzcnI6DQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgY29sID0gc2VzLmdldCgnaHR0cHM6Ly9ncmFwaC5mYWNlYm9vay5jb20vdjIuMC8nK3VzZXJyKyc/ZmllbGRzPWZyaWVuZHMubGltaXQoNTAwMCkmYWNjZXNzX3Rva2VuPScrdG9rZW5rdVswXSwgY29va2llcyA9IHsnY29va2llcyc6Y29rfSkuanNvbigpDQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgbWkgaW4gY29sWydmcmllbmRzJ11bJ2RhdGEnXToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzbyA9IChtaVsnaWQnXSsnfCcrbWlbJ25hbWUnXSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpc28gaW4gaWQ6cGFzcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6aWQuYXBwZW5kKGlzbykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0OmNvbnRpbnVlDQogICAgICAgICAgICAgICAgZXhjZXB0IChLZXlFcnJvcixJT0Vycm9yKToNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgICAgICAgICAgICAgICAgICAgICBleGl0KGYnIE5vIGludGVybmV0IGNvbm5lY3Rpb24nKQ0KICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgcGxpc3QgPSBbXQ0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIHBzX2xpbWl0ID0gaW50KGlucHV0KCcgSG93IG1hbnkgcGFzc3dvcmRzIGRvIHlvdSB3YW50IHRvIGFkZCA/ICcpKQ0KICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgIHBzX2xpbWl0ID0xDQogICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgIHByaW50KCdcMDMzWzE7MzJtIGV4cDogZmlyc3QgbGFzdCxmaXJ0c2xhc3QsZmlyc3QxMjMnKQ0KICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShwc19saW1pdCk6DQogICAgICAgICAgICAgICAgICAgICAgICBwbGlzdC5hcHBlbmQoaW5wdXQoZicgUHV0IHBhc3N3b3JkIHtpKzF9OiAnKSkNCiAgICAgICAgICAgICAgICB3aXRoIHRyZWQobWF4X3dvcmtlcnM9MzApIGFzIGNyYWNrX3N1Ym1pdDoNCiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsX2lkcyA9IHN0cihsZW4oaWQpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJyBUb3RhbCBhY2NvdW50IDogXDAzM1sxOzMybScrdG90YWxfaWRzK2YnIFwwMzNbMTszM20+XDAzM1sxOzM2bT4gXDAzM1sxOzM3bU1ldGhvZCAtPiBcMDMzWzE7MzdtTXttdGhkfScpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiXDAzM1sxOzM3bSBceDFiWzM4OzU7MjA4bVVzZSBmbGlnaHQgbW9kZSBmb3Igc3BlZWQgdXBcMDMzWzE7MzdtIikNCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB1c2VyIGluIGlkOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHMsbmFtZXMgPSB1c2VyLnNwbGl0KCd8JykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2xpc3QgPSBwbGlzdA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBtdGhkIGluIFsnMScsJzAxJ106DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JhY2tfc3VibWl0LnN1Ym1pdChmZmIsaWRzLG5hbWVzLHBhc3NsaXN0KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmIG10aGQgaW4gWycyJywnMDInXToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmFja19zdWJtaXQuc3VibWl0KGFwaSxpZHMsbmFtZXMscGFzc2xpc3QpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JhY2tfc3VibWl0LnN1Ym1pdChhcGkxLGlkcyxuYW1lcyxwYXNzbGlzdCkNCiAgICAgICAgICAgICAgICBwcmludCgnXDAzM1sxOzM3bScpDQogICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgIHByaW50KCcgVGhlIHByb2Nlc3MgaGFzIGNvbXBsZXRlZCcpDQogICAgICAgICAgICAgICAgcHJpbnQoJyBUb3RhbCBPSy9DUDogJytzdHIobGVuKG9rcykpKycvJytzdHIobGVuKGNwcykpKQ0KICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICBpbnB1dCgnIFByZXNzIGVudGVyIHRvIGJhY2sgJykNCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ3B5dGhvbiBNS0lORy5weScpDQogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgICAgICBleGl0KGYnIE5vIGludGVybmV0IGNvbm5lY3Rpb24nKQ0KICAgICAgICBleGNlcHQgKEtleUVycm9yLElPRXJyb3IpOg0KICAgICAgICAgICAgICAgIHByaW50KGYnIE5vIGZyaWVuZHMgZm9yIHt1c2Vycn0nKQ0KICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMykNCiAgICAgICAgICAgICAgICBwdWJsaWMoKQ0KZGVmIG1lbnUoKToNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgIyAgICAgICBjaGsoKQ0KICAgICAgICAgICAgICAgIHggPSAoInNleCIpDQogICAgICAgICAgICAgICAgaWYgeCA9PSAoInNleCIpOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJyBbMV0gRmlsZSBjbG9uaW5nXG4gWzJdIENyZWF0ZSBpZHMgZmlsZVxuIFszXSBQdWJsaWMgY2xvbmluZ1xuIFs0XSBSYW5kb20gbnVtYmVyIGNsb25pbmdcbiBbNV0gUmFuZG9tIGdtYWlsIGNyYWNrXG4gWzZdIFdoYXRzQXBwIEdyb3VwIChqb2luKVxuIFs3XSBEb3dubG9hZCBWcG5cbiBbOF0gSG93IFRvIFVzZSBWaWRlb1xuIFswXSBFeGl0IG1lbnUnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgeGQ9aW5wdXQoJyBDaG9vc2UgYW4gb3B0aW9uOiAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgeGQgaW4gWycxJywnMDEnXToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXIoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnIFB1dCBmaWxlIGV4YW1wbGU6ICAvc2RjYXJkL0ZpbGUudHh0ICBldGMuLicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZSA9IGlucHV0KCcgUHV0IGZpbGUgcGF0aFwwMzNbMTszN206ICcpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbyA9IG9wZW4oZmlsZSwncicpLnJlYWQoKS5zcGxpdGxpbmVzKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEZpbGVOb3RGb3VuZEVycm9yOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCcgRmlsZSBsb2NhdGlvbiBub3QgZm91bmQgJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudSgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJyBBbGwgbWV0aG9kIHdvcmtpbmcgdHJ5IDEgYnkgMSAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCcgWzFdIE1ldGhvZCAxIChmb3IgbmV3IGlkcykgXG4gWzJdIE1ldGhvZCAyIChmb3Igb2xkIGlkcylcbiBbM10gTWV0aG9kIDMgKGZvciBvbGQgaWRzKScpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXRoZD1pbnB1dCgnIENob29zZTogJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGlzdCA9IFtdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwc19saW1pdCA9IGludChpbnB1dCgnIEhvdyBtYW55IHBhc3N3b3JkcyBkbyB5b3Ugd2FudCB0byBhZGQgPyAnKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBzX2xpbWl0ID0xDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszMm0gZXhwOiBmaXJzdCBsYXN0LGZpcnRzbGFzdCxmaXJzdDEyMycpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGkgaW4gcmFuZ2UocHNfbGltaXQpOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsaXN0LmFwcGVuZChpbnB1dChmJyBQdXQgcGFzc3dvcmQge2krMX06ICcpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCcgRG8geW91IHdlbnQgc2hvdyBjcCBhY2NvdW50PyAoeS9uKTogJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjeD1pbnB1dCgnIENob29zZTogJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgY3ggaW4gWyd5JywnWScsJ3llcycsJ1llcycsJzEnXToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwY3AuYXBwZW5kKCd5JykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwY3AuYXBwZW5kKCduJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCB0cmVkKG1heF93b3JrZXJzPTMwKSBhcyBjcmFja19zdWJtaXQ6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXIoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsX2lkcyA9IHN0cihsZW4oZm8pKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCcgVG90YWwgYWNjb3VudCA6IFwwMzNbMTszMm0nK3RvdGFsX2lkcytmJyBcMDMzWzE7MzNtPlwwMzNbMTszNm0+IFwwMzNbMTszN21NZXRob2QgLT4gXDAzM1sxOzM3bU17bXRoZH0nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCJcMDMzWzE7MzdtIFx4MWJbMzg7NTsyMDhtVXNlIGZsaWdodCBtb2RlIGZvciBzcGVlZCB1cFwwMzNbMTszN20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdXNlciBpbiBmbzoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkcyxuYW1lcyA9IHVzZXIuc3BsaXQoJ3wnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2xpc3QgPSBwbGlzdA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgbXRoZCBpbiBbJzEnLCcwMSddOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmFja19zdWJtaXQuc3VibWl0KGZmYixpZHMsbmFtZXMscGFzc2xpc3QpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmIG10aGQgaW4gWycyJywnMDInXToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JhY2tfc3VibWl0LnN1Ym1pdChhcGksaWRzLG5hbWVzLHBhc3NsaXN0KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JhY2tfc3VibWl0LnN1Ym1pdChhcGkxLGlkcyxuYW1lcyxwYXNzbGlzdCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszN20nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCcgVGhlIHByb2Nlc3MgaGFzIGNvbXBsZXRlZCcpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCcgVG90YWwgT0svQ1A6ICcrc3RyKGxlbihva3MpKSsnLycrc3RyKGxlbihjcHMpKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnB1dCgnIFByZXNzIGVudGVyIHRvIGJhY2sgJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdweXRob24gTUtJTkcucHknKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiB4ZCBpbiBbJzInLCcwMiddOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnQgZHVtcA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdW1wLk1haW4oKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiB4ZCBpbiBbJzMnLCcwMyddOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiB4ZCBpbiBbJzQnLCcwNCddOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcigpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCcgWzFdIFBha2lzdGFuIGNsb25pbmdcbiBbMl0gQmFuZ2xhZGVzaCBjbG9uaW5nXG4gWzNdIEdtYWlsIGNsb25pbmdcbiBbMF0gQmFjayBtZW51JykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4PWlucHV0KCcgQ2hvb3NlOiAnKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB4IGluIFsnMScsJzAxJ106DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFrKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiB4IGluIFsnMicsJzAyJ106DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmQoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGlmIHggaW4gWyczJywnMDMnXToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbWFpbCgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVudSgpDQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmIHhkIGluIFsnNScsJzA1J106DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdtYWlsKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgeGQgaW4gWyc2JywnMDYnXToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3g9KCdEc2o5Sk1Xb2l4azRRc2plME5nM25BJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Muc3lzdGVtKGYneGRnLW9wZW4gaHR0cHM6Ly9jaGF0LndoYXRzYXBwLmNvbS9HYXpzZlVCSld3R0NGY2duYXZjdGRUJyk7bWVudSgpDQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmIHhkIGluIFsnNycsJzA3J106DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9zLnN5c3RlbSgneGRnLW9wZW4gaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3Byb2ZpbGUucGhwP2lkPTEwMDA1NzI4MTc3NDAxOCcpO21lbnUoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiB4ZCBpbiBbJzgnLCcwOCddOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8veW91dHViZS5jb20vY2hhbm5lbC9VQ0V2bmlRenc1VmZ4R2RwVFQ0UlVmM0EnKTttZW51KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgeGQgaW4gWycwJywnMDAnXToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhpdCgnIFRoYW5rcyBmb3IgdXNlIPCfpbAgJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXQoJyBPcHRpb24gbm90IGZvdW5kIGluIG1lbnUuLi4nKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiXDAzM1sxOzMxbSBZb3VyIE5vdCBQcmVtaXVtIFVzZXIuLi4hXDAzM1sxOzM3bSIpO3RpbWUuc2xlZXAoMSkNCiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCdcMDMzWzE7MzFtIEZpcnN0IFJlYWQgTm90ZSA6ICcpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiXDAzM1sxOzM2bSBXZSBOb3QgUmVzcG9uc2libGUgaWYgZmFjZWJvb2tcbiBnbyBvbiB1cGRhdGUgeW91IG5vdCBnZXQgb2sgaWR6XG4gV2UgZG9uJ3QgcmVzcG9uc2libGUgaWYgeW91IGRlbGV0ZSB5b3VyIFxuIHRlcm11eCBhbmQga2V5IG5lZWQgYXBwcm92ZVwwMzNbMTszN20iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJyBcMDMzWzE7MzFtWW91ciBLZXkgTm90IFJlZ2lzdGVyZWRcMDMzWzE7MzdtJykNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYiIFwwMzNbMTszN21Zb3VyIEtleSA6IHtma2V5eH0iKQ0KICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKTtwcmludCAoIiBUb29scy4uIDogRmFjZWJvb2sgQ2xvbmluZyIpO3ByaW50ICgiIE1hc3NhZ2UgOiBZb3VyIEtleSBOb3QgUmVnaXN0ZXJlZCIpO3ByaW50ICgiIFN0YXR1cyAgOiBcMDMzWzE7OTFtVHJhaWxcMDMzWzE7MzdtXG4gXDAzM1sxOzMxbVwwMzNbMTs0Mm1Ob3RlOiBJZiBZb3UgQXJlIEZyZWUgVXNlciBEb24ndCBDb21lIElCXDAzM1swOzBtIik7bGluZXgoKTtwcmludCgnIFsrXSBGaWxlIGNyYWNrXG4gWytdIENyZWF0ZSBpZHMgZmlsZVxuIFsrXSBQdWJsaWMgY3JhY2tcbiBbK10gUmFuZG9tIG51bWJlciBjcmFja1xuIFsrXSBSYW5kb20gZ21haWwgY3JhY2tcbiBbK10gRXhpdCBtZW51XG5ceDFiWzE7OTdtIFsxXSBVcGdyYWRlIFRvb2wgVG8gKFx4MWJbMTs5NW1QcmVtaXVtXHgxYlsxOzM3bSknKQ0KICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQoIiBDaG9vc2UgT3B0aW9uIDogIikNCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCIgWW91ciBTdWJzY3JpcHRpb24gRGF0ZSBFeHBpcmUiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdXJsX3dhID0gImh0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3Bob25lPSs5MjMxODkxNDE2MzAmdGV4dD0iDQogICAgICAgICAgICAgICAgICAgICAgICBuYW1lID0gaW5wdXQoIiBFbnRlciB5b3VyIE5hbWUgOiAiKQ0KICAgICAgICAgICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdGtzID0gKCJIaSBBa2luZyBTaXIsIEkgTmVlZCBUbyBCdXkgWW91ciBQYWlkIE1LSU5HIFBSTyBUb29scyBWZXJzaW9uIDEuOS4wIFByZW1pdW0gUGxlYXNlIEFjY2VwdCBNeSBLZXkgVG8gUHJlbWl1bSA6KVxuXG4gTmFtZSA6LSAiK25hbWUrIlxuIEtleSA6LSAiK2ZrZXl4KQ0KICAgICAgICAgICAgICAgICAgICAgICAgc3VicHJvY2Vzcy5jaGVja19vdXRwdXQoWyJhbSIsICJzdGFydCIsIHVybF93YSsodGtzKV0pO3RpbWUuc2xlZXAoMikNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCcgUnVuIDogIHB5dGhvbiBNS0lORy5weScpDQogICAgICAgICAgICAgICAgICAgICAgICBleGl0KCkNCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgICAgICAgICAgZXhpdCgpDQogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgICAgICBwcmludCgnXG4gTm8gaW50ZXJuZXQgY29ubmVjdGlvbiAuLi4nKQ0KICAgICAgICAgICAgICAgIGV4aXQoKQ0KZGVmIHBhaygpOg0KICAgICAgICAgICAgICAgIHVzZXI9W10NCiAgICAgICAgICAgICAgICBjbGVhcigpDQogICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszMW0gQ29kZSBleGFtcGxlOiAwMzA2LDAzMTUsMDMzNSwwMzQ1JykNCiAgICAgICAgICAgICAgICBjb2RlID0gaW5wdXQoJ1wwMzNbMTszN20gcHV0IGNvZGU6ICcpDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgbGltaXQgPSBpbnQoaW5wdXQoJ1wwMzNbMTszMW0gZXhhbXBsZTogMjAwMCwgMzAwMCwgNTAwMCwgMTAwMDBcblwwMzNbMTszN20gcHV0IGxpbWl0OiAnKSkNCiAgICAgICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoNCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0ID0gNTAwMA0KICAgICAgICAgICAgICAgIGZvciBubWJyIGluIHJhbmdlKGxpbWl0KToNCiAgICAgICAgICAgICAgICAgICAgICAgIG5tcCA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSg3KSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXIuYXBwZW5kKG5tcCkNCiAgICAgICAgICAgICAgICB3aXRoIHRyZWQobWF4X3dvcmtlcnM9MzApIGFzIE1raW5nOiAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICBjbGVhcigpDQogICAgICAgICAgICAgICAgICAgICAgICB0bCA9IHN0cihsZW4odXNlcikpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnIFRvdGFsIGFjY291bnQgOiBcMDMzWzE7MzJtJyt0bCkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXDAzM1sxOzM3bSBDaG9pY2UgY29kZSAuLjpcMDMzWzE7MzJtICcrY29kZSkNCiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KGYnXDAzM1sxOzM3bSBceDFiWzM4OzU7MjA4bVVzZSBmbGlnaHQgbW9kZSBmb3Igc3BlZWQgdXBcMDMzWzE7OTdtJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciBwc3ggaW4gdXNlcjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRzID0gY29kZStwc3gNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc2xpc3QgPSBbcHN4LGlkcywna2hhbmtoYW4nLCdraGFuMTEyMicsJ2toYW4xMjM0NScsJ2toYW4xMjM0Jywna2hhbjEyJywna2hhbjc4NicsJ2toYW4xMjMnLCdraGFuMTIzNDU2Jywna2hhbmtoYW4xMjMnLCc3ODY3ODYnXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBa2luZy5zdWJtaXQocm5kbSxpZHMscGFzc2xpc3QpDQogICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszN20nKQ0KICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICBwcmludCgnIFRoZSBwcm9jZXNzIGhhcyBjb21wbGV0ZWQnKQ0KICAgICAgICAgICAgICAgIHByaW50KCcgVG90YWwgT0svQ1A6ICcrc3RyKGxlbihva3MpKSsnLycrc3RyKGxlbihjcHMpKSkNCiAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgaW5wdXQoJyBQcmVzcyBlbnRlciB0byBiYWNrICcpDQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdweXRob24gTUtJTkcucHknKQ0KZGVmIGJkKCk6DQogICAgICAgICAgICAgICAgdXNlcj1bXQ0KICAgICAgICAgICAgICAgIGNsZWFyKCkNCiAgICAgICAgICAgICAgICBwcmludCgnXDAzM1sxOzMxbSBDb2RlIGV4YW1wbGU6IDAxNiwwMTcsMDE4LDAxOScpDQogICAgICAgICAgICAgICAgY29kZSA9IGlucHV0KCdcMDMzWzE7MzdtIHB1dCBjb2RlOiAnKQ0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0ID0gaW50KGlucHV0KCdcMDMzWzE7MzFtIGV4YW1wbGU6IDIwMDAsIDMwMDAsIDUwMDAsIDEwMDAwXG5cMDMzWzE7MzdtIHB1dCBsaW1pdDogJykpDQogICAgICAgICAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6DQogICAgICAgICAgICAgICAgICAgICAgICBsaW1pdCA9IDUwMDANCiAgICAgICAgICAgICAgICBmb3Igbm1iciBpbiByYW5nZShsaW1pdCk6DQogICAgICAgICAgICAgICAgICAgICAgICBubXAgPSAnJy5qb2luKHJhbmRvbS5jaG9pY2Uoc3RyaW5nLmRpZ2l0cykgZm9yIF8gaW4gcmFuZ2UoOCkpDQogICAgICAgICAgICAgICAgICAgICAgICB1c2VyLmFwcGVuZChubXApDQogICAgICAgICAgICAgICAgd2l0aCB0cmVkKG1heF93b3JrZXJzPTMwKSBhcyBNa2luZzogICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXIoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdGwgPSBzdHIobGVuKHVzZXIpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJyBUb3RhbCBhY2NvdW50IDogXDAzM1sxOzMybScrdGwpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ1wwMzNbMTszN20gQ2hvaWNlIGNvZGUgLi46XDAzM1sxOzMybSAnK2NvZGUpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludChmJ1wwMzNbMTszN20gXHgxYlszODs1OzIwOG1Vc2UgZmxpZ2h0IG1vZGUgZm9yIHNwZWVkIHVwXDAzM1sxOzk3bScpDQogICAgICAgICAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgcHN4IGluIHVzZXI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkcyA9IGNvZGUrcHN4DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NsaXN0ID0gW3BzeCxpZHMsJ0JhbmdsYWRlc2gnLCdiYW5nbGFkZXNoJywnaSBsb3ZlIHlvdScsJ2lsb3ZleW91JywnZnJlZSBmaXJlJywnZnJlZWZpcmUnXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBa2luZy5zdWJtaXQocm5kbSxpZHMscGFzc2xpc3QpDQogICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszN20nKQ0KICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICBwcmludCgnIFRoZSBwcm9jZXNzIGhhcyBjb21wbGV0ZWQnKQ0KICAgICAgICAgICAgICAgIHByaW50KCcgVG90YWwgT0svQ1A6ICcrc3RyKGxlbihva3MpKSsnLycrc3RyKGxlbihjcHMpKSkNCiAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgaW5wdXQoJyBQcmVzcyBlbnRlciB0byBiYWNrICcpDQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdweXRob24gTUtJTkcucHknKQ0KZGVmIGdtYWlsKCk6DQogICAgICAgICAgICAgICAgb3Muc3lzdGVtKCdybSAtcmYgLnJlLnR4dCcpDQogICAgICAgICAgICAgICAgY2xlYXIoKQ0KICAgICAgICAgICAgICAgIHByaW50KCdcMDMzWzE7MzdtIGV4YW1wbGU6IG11aGFtbWFkLCBhbGksIHNhamphZCwgZmFpemFuXDAzM1sxOzk3bScpDQogICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgIGZpcnN0ID0gaW5wdXQoJyBQdXQgZmlyc3QgbmFtZTogJykNCiAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgcHJpbnQoJ1wwMzNbMTszN20gZXhhbXBsZToga2hhbiwgYWhtYWQsIGFsaSBcMDMzWzE7OTdtJykNCiAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgbGFzdCA9IGlucHV0KCcgUHV0IGxhc3QgbmFtZTogJykNCiAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgcHJpbnQoJyBFeGFtcGxlOiBAZ21haWwuY29tICwgQHlhaG9vLmNvbSBldGMuLi4nKQ0KICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICBkb21haW4gPSBpbnB1dCgnIGRvbWFpbjogJykNCiAgICAgICAgICAgICAgICBsaW5leCgpDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgbGltaXQ9aW50KGlucHV0KCcgUHV0IGxpbWl0OiAnKSkNCiAgICAgICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoNCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0ID0gNTAwMA0KICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICBwcmludCgnIEdldHRpbmcgZ21haWxzLi4uJykNCiAgICAgICAgICAgICAgICBsaXN0cyA9IFsnMycsJzQnXQ0KICAgICAgICAgICAgICAgIGZvciB4ZCBpbiByYW5nZShsaW1pdCk6DQogICAgICAgICAgICAgICAgICAgICAgICBsY2hvaWNlID0gcmFuZG9tLmNob2ljZShsaXN0cykNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICczJyBpbiBsY2hvaWNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWlsID0gJycuam9pbihyYW5kb20uY2hvaWNlKHN0cmluZy5kaWdpdHMpIGZvciBfIGluIHJhbmdlKDMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKCcucmUudHh0JywnYScpLndyaXRlKGZpcnN0Lmxvd2VyKCkrbGFzdC5sb3dlcigpK21haWwrZG9tYWluKyd8JytmaXJzdCsnICcrbGFzdCsnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFpbCA9ICcnLmpvaW4ocmFuZG9tLmNob2ljZShzdHJpbmcuZGlnaXRzKSBmb3IgXyBpbiByYW5nZSg0KSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbignLnJlLnR4dCcsJ2EnKS53cml0ZShmaXJzdC5sb3dlcigpK2xhc3QubG93ZXIoKSttYWlsK2RvbWFpbisnfCcrZmlyc3QrJyAnK2xhc3QrJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvID0gb3BlbignLnJlLnR4dCcsICdyJykucmVhZCgpLnNwbGl0bGluZXMoKQ0KICAgICAgICAgICAgICAgIHdpdGggdHJlZChtYXhfd29ya2Vycz0zMCkgYXMgQWtpbmc6DQogICAgICAgICAgICAgICAgICAgICAgICB0b3RhbCA9IHN0cihsZW4oZm8pKQ0KICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXIoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJyBUb3RhbCBhY2NvdW50IDogXDAzM1sxOzMybScrdG90YWwpDQogICAgICAgICAgICAgICAgICAgICAgICBwcmludCgiXDAzM1sxOzM3bSBceDFiWzM4OzU7MjA4bVVzZSBmbGlnaHQgbW9kZSBmb3Igc3BlZWQgdXBcMDMzWzE7MzdtIikNCiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB1c2VyIGluIGZvOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZHMsbmFtZXMgPSB1c2VyLnNwbGl0KCd8JykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3RfbmFtZSA9IG5hbWVzLnJzcGxpdCgnICcpWzBdDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X25hbWUgPSBuYW1lcy5yc3BsaXQoJyAnKVsxXQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgSW5kZXhFcnJvcjoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0X25hbWUgPSAnS2hhbicNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnMgPSBmaXJzdF9uYW1lLmxvd2VyKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbHMgPSBsYXN0X25hbWUubG93ZXIoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzbGlzdCA9IFtmcytscyxmcysnICcrbHMsZnMrJzEyMycsZnMrJzEyMzQ1JyxmcysnMTEyMicsZnMsZnMrJzEyMzQnLGZzKyc3ODYnLGZzKycxMiddDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFraW5nLnN1Ym1pdChybmRtLGlkcyxwYXNzbGlzdCkNCiAgICAgICAgICAgICAgICBwcmludCgnXDAzM1sxOzM3bScpDQogICAgICAgICAgICAgICAgbGluZXgoKQ0KICAgICAgICAgICAgICAgIHByaW50KCcgVGhlIHByb2Nlc3MgaGFzIGNvbXBsZXRlZCcpDQogICAgICAgICAgICAgICAgcHJpbnQoJyBUb3RhbCBPSy9DUDogJytzdHIobGVuKG9rcykpKycvJytzdHIobGVuKGNwcykpKQ0KICAgICAgICAgICAgICAgIGxpbmV4KCkNCiAgICAgICAgICAgICAgICBpbnB1dCgnIFByZXNzIGVudGVyIHRvIGJhY2sgJykNCiAgICAgICAgICAgICAgICBvcy5zeXN0ZW0oJ3B5dGhvbiBNS0lORy5weScpDQpkZWYgZmZiKGlkcyxuYW1lcyxwYXNzbGlzdCk6DQogICAgICAgIGdsb2JhbCBsb29wLG9rcyxjcHMNCiAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgnXHJcclwwMzNbMTszN20gW01LSU5HLVhEXSAlc3xcMDMzWzE7MzJtT0s6LSVzIFwwMzNbMTszN20nJShsb29wLGxlbihva3MpKSk7c3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgIHNlc3Npb24gPSByZXF1ZXN0cy5TZXNzaW9uKCkNCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGZpcnN0ID0gbmFtZXMuc3BsaXQoJyAnKVswXQ0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3QgPSBuYW1lcy5zcGxpdCgnICcpWzFdDQogICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgbGFzdCA9ICdLaGFuJw0KICAgICAgICAgICAgICAgIHBzID0gZmlyc3QubG93ZXIoKQ0KICAgICAgICAgICAgICAgIHBzMiA9IGxhc3QubG93ZXIoKQ0KICAgICAgICAgICAgICAgIGZvciBmaWtyIGluIHBhc3NsaXN0Og0KICAgICAgICAgICAgICAgICAgICAgICAgcGFzID0gZmlrci5yZXBsYWNlKCdGaXJzdCcsZmlyc3QpLnJlcGxhY2UoJ0xhc3QnLGxhc3QpLnJlcGxhY2UoJ2ZpcnN0JyxwcykucmVwbGFjZSgnbGFzdCcscHMyKQ0KICAgICAgICAgICAgICAgICAgICAgICAgdWE9cmFuZG9tLmNob2ljZSh1Z2VuKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCA9IHsnSG9zdCc6ICdtLmZhY2Vib29rLmNvbScsICd2aWV3cG9ydC13aWR0aCc6ICc5ODAnLCAnc2VjLWNoLXVhJzogJyIgTm90IEE7QnJhbmQiO3Y9Ijk5IiwgIkNocm9taXVtIjt2PSIxMDAiLCAiR29vZ2xlIENocm9tZSI7dj0iMTAwIicsICdzZWMtY2gtdWEtbW9iaWxlJzogJz8xJywgJ3NlYy1jaC11YS1wbGF0Zm9ybSc6JyJBbmRyb2lkIicsICdzZWMtY2gtcHJlZmVycy1jb2xvci1zY2hlbWUnOiAnbGlnaHQnLCAnZG50JzogJzEnLCAndXBncmFkZS1pbnNlY3VyZS1yZXF1ZXN0cyc6ICcxJywgJ3VzZXItYWdlbnQnOiB1YSwgJ2FjY2VwdCc6ICd0ZXh0L2h0bWwsYXBwbGljYXRpb24veGh0bWwreG1sLGFwcGxpY2F0aW9uL3htbDtxPTAuOSxpbWFnZS9hdmlmLGltYWdlL3dlYnAsaW1hZ2UvYXBuZywqW2luc2VydGVkIGJ5IGN5dGhvbiB0byBhdm9pZCBjb21tZW50IGNsb3Nlcl0vW2luc2VydGVkIGJ5IGN5dGhvbiB0byBhdm9pZCBjb21tZW50IHN0YXJ0XSo7cT0wLjgsYXBwbGljYXRpb24vc2lnbmVkLWV4Y2hhbmdlO3Y9YjM7cT0wLjknLCAnc2VjLWZldGNoLXNpdGUnOiAnbm9uZScsICdzZWMtZmV0Y2gtbW9kZSc6ICduYXZpZ2F0ZScsICdzZWMtZmV0Y2gtdXNlcic6ICc/MScsICdzZWMtZmV0Y2gtZGVzdCc6ICdkb2N1bWVudCcsICdhY2NlcHQtZW5jb2RpbmcnOiAnZ3ppcCwgZGVmbGF0ZSwgYnInLCAnYWNjZXB0LWxhbmd1YWdlJzogJ2VuLVVTLGVuO3E9MC45J30NCiAgICAgICAgICAgICAgICAgICAgICAgIGdldGxvZyA9IHNlc3Npb24uZ2V0KGYnaHR0cHM6Ly9mcmVlLmZhY2Vib29rLmNvbS9sb2dpbi9kZXZpY2UtYmFzZWQvcGFzc3dvcmQvP3VpZD17aWRzfSZmbG93PWxvZ2luX25vX3BpbiZyZWZzcmM9ZGVwcmVjYXRlZCZfcmRyJykNCiAgICAgICAgICAgICAgICAgICAgICAgIGlkcGFzcyA9eyJsc2QiOnJlLnNlYXJjaCgnbmFtZT0ibHNkIiB2YWx1ZT0iKC4qPykiJywgc3RyKGdldGxvZy50ZXh0KSkuZ3JvdXAoMSksImphem9lc3QiOnJlLnNlYXJjaCgnbmFtZT0iamF6b2VzdCIgdmFsdWU9IiguKj8pIicsIHN0cihnZXRsb2cudGV4dCkpLmdyb3VwKDEpLCJ1aWQiOmlkcywibmV4dCI6Imh0dHBzOi8vbWJhc2ljLmZhY2Vib29rLmNvbS9sb2dpbi9zYXZlLWRldmljZS8iLCJmbG93IjoibG9naW5fbm9fcGluIiwicGFzcyI6cGFzLH0NCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlID0gc2Vzc2lvbi5wb3N0KCdodHRwczovL2ZyZWUuZmFjZWJvb2suY29tL2xvZ2luL2RldmljZS1iYXNlZC92YWxpZGF0ZS1wYXNzd29yZC8/c2hibD0wJyxkYXRhPWlkcGFzcyxhbGxvd19yZWRpcmVjdHM9RmFsc2UsaGVhZGVycz1oZWFkKQ0KICAgICAgICAgICAgICAgICAgICAgICAgQWtpbmc9c2Vzc2lvbi5jb29raWVzLmdldF9kaWN0KCkua2V5cygpDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAiY191c2VyIiBpbiBNa2luZzoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29raT1zZXNzaW9uLmNvb2tpZXMuZ2V0X2RpY3QoKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrdWtpID0gKCI7Iikuam9pbihbICIlcz0lcyIgJSAoa2V5LCB2YWx1ZSkgZm9yIGtleSwgdmFsdWUgaW4gc2Vzc2lvbi5jb29raWVzLmdldF9kaWN0KCkuaXRlbXMoKSBdKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnXHJcclwwMzNbMTszMm0gW01LSU5HLU9LXSAlcyB8ICVzJyUoaWRzLHBhcykpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvTUtJTkctT0sudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKGlkcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ2NoZWNrcG9pbnQnIGluIE1raW5nOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAneScgaW4gcGNwOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50KCdcclxyXHgxYlszODs1OzIwOG0gW01LSU5HLUNQXSAnK2lkcysnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvTUtJTkctQ1AudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNwcy5hcHBlbmQoaWRzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDIwKQ0KICAgICAgICBsb29wKz0xDQp4eHh4eD0oIkdULTEwMTUiLCJHVC0xMDIwIiwiR1QtMTAzMCIsIkdULTEwMzUiLCJHVC0xMDQwIiwiR1QtMTA0NSIsIkdULTEwNTAiLCJHVC0xMjQwIiwiR1QtMTQ0MCIsIkdULTE0NTAiLCJHVC0xODE5MCIsIkdULTE4MjYyIiwiR1QtMTkwNjBJIiwiR1QtMTkwODIiLCJHVC0xOTA4MyIsIkdULTE5MTA1IiwiR1QtMTkxNTIiLCJHVC0xOTE5MiIsIkdULTE5MzAwIiwiR1QtMTk1MDUiLCJHVC0yMDAwIiwiR1QtMjAwMDAiLCJHVC0yMDBzIiwiR1QtMzAwMCIsIkdULTQxNFhPUCIsIkdULTY5MTgiLCJHVC03MDEwIiwiR1QtNzAyMCIsIkdULTcwMzAiLCJHVC03MDQwIiwiR1QtNzA1MCIsIkdULTcxMDAiLCJHVC03MTA1IiwiR1QtNzExMCIsIkdULTcyMDUiLCJHVC03MjEwIiwiR1QtNzI0MFIiLCJHVC03MjQ1IiwiR1QtNzMwMyIsIkdULTczMTAiLCJHVC03MzIwIiwiR1QtNzMyNSIsIkdULTczMjYiLCJHVC03MzQwIiwiR1QtNzQwNSIsIkdULTc1NTAgNUdULTgwMDUiLCJHVC04MDEwIiwiR1QtODEiLCJHVC04MTAiLCJHVC04MTA1IiwiR1QtODExMCIsIkdULTgyMjBTIiwiR1QtODQxMCIsIkdULTkzMDAiLCJHVC05MzIwIiwiR1QtOTNHIiwiR1QtQTcxMDAiLCJHVC1BOTUwMCIsIkdULUFORFJPSUQiLCJHVC1CMjcxMCIsIkdULUI1MzMwIiwiR1QtQjUzMzBCIiwiR1QtQjUzMzBMIiwiR1QtQjUzMzBaS0FJTlUiLCJHVC1CNTUxMCIsIkdULUI1NTEyIiwiR1QtQjU3MjIiLCJHVC1CNzUxMCIsIkdULUI3NzIyIiwiR1QtQjc4MTAiLCJHVC1COTE1MCIsIkdULUI5Mzg4IiwiR1QtQzMwMTAiLCJHVC1DMzI2MiIsIkdULUMzMzEwUiIsIkdULUMzMzEyIiwiR1QtQzMzMTJSIiwiR1QtQzMzMTNUIiwiR1QtQzMzMjIiLCJHVC1DMzMyMmkiLCJHVC1DMzUyMCIsIkdULUMzNTIwSSIsIkdULUMzNTkyIiwiR1QtQzM1OTUiLCJHVC1DMzc4MiIsIkdULUM2NzEyIiwiR1QtRTEyODJUIiwiR1QtRTE1MDAiLCJHVC1FMjIwMCIsIkdULUUyMjAyIiwiR1QtRTIyNTAiLCJHVC1FMjI1MiIsIkdULUUyNjAwIiwiR1QtRTI2NTJXIiwiR1QtRTMyMTAiLCJHVC1FMzMwOSIsIkdULUUzMzA5SSIsIkdULUUzMzA5VCIsIkdULUc1MzBIIiwiR1QtRzkzMEYiLCJHVC1IOTUwMCIsIkdULUk1NTA4IiwiR1QtSTU4MDEiLCJHVC1JNjQxMCIsIkdULUk4MTUwIiwiR1QtSTgxNjBPS0xUUEEiLCJHVC1JODE2MFpXTFRUVCIsIkdULUk4MjU4IiwiR1QtSTgyNjJEIiwiR1QtSTgyNjgiIkdULUk4NTA1IiwiR1QtSTg1MzBCQUFCVFUiLCJHVC1JODUzMEJBTENITyIsIkdULUk4NTMwQkFMVFRUIiwiR1QtSTg1NTBFIiwiR1QtSTg3NTAiLCJHVC1JOTAwIiwiR1QtSTkwMDhMIiwiR1QtSTkwODBFIiwiR1QtSTkwODJDIiwiR1QtSTkwODJFV0FJTlUiLCJHVC1JOTA4MmkiLCJHVC1JOTEwMEciLCJHVC1JOTEwMExLTENIVCIsIkdULUk5MTAwTSIsIkdULUk5MTAwUCIsIkdULUk5MTAwVCIsIkdULUk5MTA1VUFOREJUIiwiR1QtSTkxMjhFIiwiR1QtSTkxMjhJIiwiR1QtSTkxMjhWIiwiR1QtSTkxNThQIiwiR1QtSTkxNThWIiwiR1QtSTkxNjhJIiwiR1QtSTkxOTAiLCJHVC1JOTE5MiIsIkdULUk5MTkySSIsIkdULUk5MTk1SCIsIkdULUk5MTk1TCIsIkdULUk5MjUwIiwiR1QtSTkzMDAiLCJHVC1JOTMwMEkiLCJHVC1JOTMwMUkiLCJHVC1JOTMwM0kiLCJHVC1JOTMwNU4iLCJHVC1JOTMwOEkiLCJHVC1JOTUwMCIsIkdULUk5NTA1RyIsIkdULUk5NTA1WCIsIkdULUk5NTA3ViIsIkdULUk5NjAwIiwiR1QtTTU2NTAiLCJHVC1ONTAwMFMiLCJHVC1ONTEwMCIsIkdULU41MTA1IiwiR1QtTjUxMTAiLCJHVC1ONTEyMCIsIkdULU43MDAwQiIsIkdULU43MDA1IiwiR1QtTjcxMDAiLCJHVC1ONzEwMFQiLCJHVC1ONzEwMiIsIkdULU43MTA1IiwiR1QtTjcxMDVUIiwiR1QtTjcxMDgiLCJHVC1ONzEwOEQiLCJHVC1OODAwMCIsIkdULU44MDA1IiwiR1QtTjgwMTAiLCJHVC1OODAyMCIsIkdULU45MDAwIiwiR1QtTjk1MDUiLCJHVC1QMTAwMENXQVhTQSIsIkdULVAxMDAwTSIsIkdULVAxMDAwVCIsIkdULVAxMDEwIiwiR1QtUDMxMDBCIiwiR1QtUDMxMDUiLCJHVC1QMzEwOCIsIkdULVAzMTEwIiwiR1QtUDUxMDAiLCJHVC1QNTExMCIsIkdULVA1MjAwIiwiR1QtUDUyMTAiLCJHVC1QNTIxMFhEMSIsIkdULVA1MjIwIiwiR1QtUDYyMDAiLCJHVC1QNjIwMEwiLCJHVC1QNjIwMSIsIkdULVA2MjEwIiwiR1QtUDYyMTEiLCJHVC1QNjgwMCIsIkdULVA3MTAwIiwiR1QtUDczMDAiLCJHVC1QNzMwMEIiLCJHVC1QNzMxMCIsIkdULVA3MzIwIiwiR1QtUDc1MDBEIiwiR1QtUDc1MDBNIiwiU0FNU1VORyIsIkxNWTQiLCJMTVk0N1YiLCJNTUIyOUsiLCJNTUIyOU0iLCJMUlgyMkMiLCJMUlgyMkciLCJOTUYyIiwiTk1GMjZYIiwiTk1GMjZYOyIsIk5SRDkwTSIsIk5SRDkwTTsiLCJTUEgtTDcyMCIsIklNTDc0SyIsIklNTTc2RCIsIkpEUTM5IiwiSlNTMTVKIiwiSlpPNTRLIiwiS09UNCIsIktPVDQ5SCIsIktPVDRTTS1UMzEwIiwiS1RVODRQIiwiU00tQTUwMEYiLCJTTS1BNTAwRlUiLCJTTS1BNTAwSCIsIlNNLUc1MzJGIiwiU00tRzkwMEYiLCJTTS1HOTIwRiIsIlNNLUc5MzBGIiwiU00tRzkzNSIsIlNNLUc5NTBGIiwiU00tSjMyMEYiLCJTTS1KMzIwRk4iLCJTTS1KMzIwSCIsIlNNLUozMjBNIiwiU00tSjUxMEZOIiwiU00tSjcwMUYiLCJTTS1OOTIwUyIsIlNNLVQxMTEiLCJTTS1UMjMwIiwiU00tVDIzMSIsIlNNLVQyMzUiLCJTTS1UMjgwIiwiU00tVDMxMSIsIlNNLVQzMTUiLCJTTS1UNTI1IiwiU00tVDUzMSIsIlNNLVQ1MzUiLCJTTS1UNTU1IiwiU00tVDU2MSIsIlNNLVQ3MDUiLCJTTS1UODA1IiwiU00tVDgyMCIpDQpkZWYgYXBpKGlkcyxuYW1lcyxwYXNzbGlzdCk6DQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsIG9rLGxvb3ANCiAgICAgICAgICAgICAgICAgICAgICAgIHN5cy5zdGRvdXQud3JpdGUoJ1xyXHJcMDMzWzE7MzdtIFtNS0lORy1YRF0gJXN8XDAzM1sxOzMybU9LOi0lcyBcMDMzWzE7MzdtJyUobG9vcCxsZW4ob2tzKSkpO3N5cy5zdGRvdXQuZmx1c2goKQ0KICAgICAgICAgICAgICAgICAgICAgICAgZm4gPSBuYW1lcy5zcGxpdCgnICcpWzBdDQogICAgICAgICAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuID0gbmFtZXMuc3BsaXQoJyAnKVsxXQ0KICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbiA9IGZuDQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgcHcgaW4gcGFzc2xpc3Q6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcyA9IHB3LnJlcGxhY2UoJ2ZpcnN0Jyxmbi5sb3dlcigpKS5yZXBsYWNlKCdGaXJzdCcsZm4pLnJlcGxhY2UoJ2xhc3QnLGxuLmxvd2VyKCkpLnJlcGxhY2UoJ0xhc3QnLGxuKS5yZXBsYWNlKCdOYW1lJyxuYW1lcykucmVwbGFjZSgnbmFtZScsbmFtZXMubG93ZXIoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25fdmVyc2lvbiA9IHN0cihyYW5kb20ucmFuZGludCgxMTEsNTU1KSkrJy4wLjAuJytzdHIocmFuZG9tLnJhbmRyYW5nZSg5LDQ5KSkrc3RyKHJhbmRvbS5yYW5kaW50KDExMSw1NTUpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbl92ZXJzaW9uX2NvZGU9c3RyKHJhbmRvbS5yYW5kaW50KDAwMDAwMDAwMCw5OTk5OTk5OTkpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYnM9cmFuZG9tLmNob2ljZShmYmtzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndHQ9cmFuZG9tLmNob2ljZSh4eHh4eCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3R0dD1yYW5kb20uY2hvaWNlKHh4eHh4KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmRyb2lkX3ZlcnNpb249c3RyKHJhbmRvbS5yYW5kcmFuZ2UoNiwxMykpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVhX3N0cmluZyA9IGYnRGF2aWsvMi4xLjAgKExpbnV4OyBVOyBBbmRyb2lkIHtzdHIoYW5kcm9pZF92ZXJzaW9uKX0uMC4wOyB7c3RyKGd0dCl9IEJ1aWxkL3tzdHIoZ3R0dCl9IFtGQkFOL0ZCNEE7RkJBVi97c3RyKGFwcGxpY2F0aW9uX3ZlcnNpb24pfTtGQkJWL3tzdHIoYXBwbGljYXRpb25fdmVyc2lvbl9jb2RlKX07RkJETS8nKyd7ZGVuc2l0eT0yLjAsd2lkdGg9NzIwLGhlaWdodD0xMjgwfTsnK2YnRkJMQy9lbl9VUztGQlJWL3tzdHIoYXBwbGljYXRpb25fdmVyc2lvbl9jb2RlKX07RkJDUi9Nb3Zpc3RhcjtGQk1GL3NhbXN1bmc7RkJCRC9zYW1zdW5nO0ZCUE4ve3N0cihmYnMpfTtGQkRWL3tzdHIoZ3R0KX07RkJTVi83LjA7RkJPUC8xO0ZCQ0EvYXJtZWFiaS12N2E6YXJtZWFiaTtdJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXZpY2VfaWQgPSBzdHIodXVpZC51dWlkNCgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGlkID0gc3RyKHV1aWQudXVpZDQoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IHsnYWRpZCc6YWRpZCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZW1haWwnOmlkcywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFzc3dvcmQnOnBhcywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3BsJzondHJ1ZScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NyZWRlbnRpYWxzX3R5cGUnOidkZXZpY2VfYmFzZWRfbG9naW5fcGFzc3dvcmQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJzb3VyY2UiOiAiZGV2aWNlX2Jhc2VkX2xvZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZXJyb3JfZGV0YWlsX3R5cGUnOididXR0b25fd2l0aF9kaXNhYmxlZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NvdXJjZSc6J2xvZ2luJywnZm9ybWF0JzonanNvbicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX3Nlc3Npb25fY29va2llcyc6JzEnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9hbmFseXRpY3NfY2xhaW0nOicxJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfbWFjaGluZV9pZCc6JzEnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJsb2NhbGUiOiJlbl9VUyIsImNsaWVudF9jb3VudHJ5X2NvZGUiOiJVUyIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RldmljZSc6Z3R0LA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXZpY2VfaWQnOmFkaWQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIm1ldGhvZCI6ICJhdXRoLmxvZ2luIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmJfYXBpX3JlcV9mcmllbmRseV9uYW1lIjogImF1dGhlbnRpY2F0ZSIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZiX2FwaV9jYWxsZXJfY2xhc3MiOiAiY29tLmZhY2Vib29rLmFjY291bnQubG9naW4ucHJvdG9jb2wuRmI0YUF1dGhIYW5kbGVyIn0NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZCA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY29udGVudC10eXBlJzonYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1zaW0taG5pJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU0LDRlNCkpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tdHlwZSc6J3Vua25vd24nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzonT0F1dGggMzUwNjg1NTMxNzI4fDYyZjhjZTlmNzRiMTJmODRjMTIzY2MyMzQzN2E0YTMyJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndXNlci1hZ2VudCc6dWFfc3RyaW5nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLW5ldC1obmknOnN0cihyYW5kb20ucmFuZGludCgyZTQsNGU0KSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItY29ubmVjdGlvbi1iYW5kd2lkdGgnOnN0cihyYW5kb20ucmFuZGludCgyZTcsM2U3KSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItY29ubmVjdGlvbi1xdWFsaXR5JzonRVhDRUxMRU5UJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1mcmllbmRseS1uYW1lJzonYXV0aGVudGljYXRlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYWNjZXB0LWVuY29kaW5nJzonZ3ppcCwgZGVmbGF0ZScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItaHR0cC1lbmdpbmUnOiAgICAgJ0xpZ2VyJ30NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsID0gJ2h0dHBzOi8vYi1hcGkuZmFjZWJvb2suY29tL21ldGhvZC9hdXRoLmxvZ2luJw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbyA9IHJlcXVlc3RzLnBvc3QodXJsLGRhdGE9ZGF0YSxoZWFkZXJzPWhlYWQsYWxsb3dfcmVkaXJlY3RzPUZhbHNlKS50ZXh0DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHEgPSBqc29uLmxvYWRzKHBvKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAnc2Vzc2lvbl9rZXknIGluIHE6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1xyXHJcMDMzWzE7MzJtIFtNS0lORy1PS10gJytpZHMrJyB8ICcrcGFzKydcMDMzWzE7OTdtJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL01LSU5HLU9LLnR4dCcsJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9rcy5hcHBlbmQoaWRzKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsaWYgJ3d3dy5mYWNlYm9vay5jb20nIGluIHFbJ2Vycm9yX21zZyddOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICd5JyBpbiBwY3A6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnXHJcclx4MWJbMzg7NTsyMDhtIFtNS0lORy1DUF0gJytpZHMrJyB8ICcrcGFzKydcMDMzWzE7OTdtJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvTUtJTkctQ1AudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlDQogICAgICAgICAgICAgICAgICAgICAgICBsb29wKz0xDQogICAgICAgICAgICAgICAgZXhjZXB0IHJlcXVlc3RzLmV4Y2VwdGlvbnMuQ29ubmVjdGlvbkVycm9yOg0KICAgICAgICAgICAgICAgICAgICAgICAgdGltZS5zbGVlcCgxMCkNCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQpkZWYgYXBpMShpZHMsbmFtZXMscGFzc2xpc3QpOg0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIGdsb2JhbCBvayxsb29wDQogICAgICAgICAgICAgICAgICAgICAgICBzeXMuc3Rkb3V0LndyaXRlKCdcclxyXDAzM1sxOzM3bSBbTUtJTkctWERdICVzfFwwMzNbMTszMm1PSzotJXMgXDAzM1sxOzM3bSclKGxvb3AsbGVuKG9rcykpKTtzeXMuc3Rkb3V0LmZsdXNoKCkNCiAgICAgICAgICAgICAgICAgICAgICAgIGZuID0gbmFtZXMuc3BsaXQoJyAnKVswXQ0KICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbiA9IG5hbWVzLnNwbGl0KCcgJylbMV0NCiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG4gPSBmbg0KICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHB3IGluIHBhc3NsaXN0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXMgPSBwdy5yZXBsYWNlKCdmaXJzdCcsZm4ubG93ZXIoKSkucmVwbGFjZSgnRmlyc3QnLGZuKS5yZXBsYWNlKCdsYXN0Jyxsbi5sb3dlcigpKS5yZXBsYWNlKCdMYXN0JyxsbikucmVwbGFjZSgnTmFtZScsbmFtZXMpLnJlcGxhY2UoJ25hbWUnLG5hbWVzLmxvd2VyKCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uX3ZlcnNpb24gPSBzdHIocmFuZG9tLnJhbmRpbnQoMTExLDU1NSkpKycuMC4wLicrc3RyKHJhbmRvbS5yYW5kcmFuZ2UoOSw0OSkpK3N0cihyYW5kb20ucmFuZGludCgxMTEsNTU1KSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25fdmVyc2lvbl9jb2RlPXN0cihyYW5kb20ucmFuZGludCgwMDAwMDAwMDAsOTk5OTk5OTk5KSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmJzPXJhbmRvbS5jaG9pY2UoZmJrcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3R0PXJhbmRvbS5jaG9pY2UoeHh4eHgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd0dHQ9cmFuZG9tLmNob2ljZSh4eHh4eCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kcm9pZF92ZXJzaW9uPXN0cihyYW5kb20ucmFuZHJhbmdlKDYsMTMpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1YV9zdHJpbmcgPSBmJ0RhdmlrLzIuMS4wIChMaW51eDsgVTsgQW5kcm9pZCB7c3RyKGFuZHJvaWRfdmVyc2lvbil9LjAuMDsge3N0cihndHQpfSBCdWlsZC97c3RyKGd0dHQpfSBbRkJBTi9GQjRBO0ZCQVYve3N0cihhcHBsaWNhdGlvbl92ZXJzaW9uKX07RkJCVi97c3RyKGFwcGxpY2F0aW9uX3ZlcnNpb25fY29kZSl9O0ZCRE0vJysne2RlbnNpdHk9Mi4wLHdpZHRoPTcyMCxoZWlnaHQ9MTI4MH07JytmJ0ZCTEMvZXNfQ1U7RkJSVi97c3RyKGFwcGxpY2F0aW9uX3ZlcnNpb25fY29kZSl9O0ZCQ1IvTW92aXN0YXI7RkJNRi9zYW1zdW5nO0ZCQkQvc2Ftc3VuZztGQlBOL3tzdHIoZmJzKX07RkJEVi97c3RyKGd0dCl9O0ZCU1YvNy4wO0ZCT1AvMTtGQkNBL2FybWVhYmktdjdhOmFybWVhYmk7XScNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGV2aWNlX2lkID0gc3RyKHV1aWQudXVpZDQoKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRpZCA9IHN0cih1dWlkLnV1aWQ0KCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB7J2FkaWQnOmFkaWQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VtYWlsJzppZHMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Bhc3N3b3JkJzpwYXMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NwbCc6J3RydWUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjcmVkZW50aWFsc190eXBlJzonZGV2aWNlX2Jhc2VkX2xvZ2luX3Bhc3N3b3JkJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAic291cmNlIjogImRldmljZV9iYXNlZF9sb2dpbiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Vycm9yX2RldGFpbF90eXBlJzonYnV0dG9uX3dpdGhfZGlzYWJsZWQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzb3VyY2UnOidsb2dpbicsJ2Zvcm1hdCc6J2pzb24nLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9zZXNzaW9uX2Nvb2tpZXMnOicxJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfYW5hbHl0aWNzX2NsYWltJzonMScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX21hY2hpbmVfaWQnOicxJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibG9jYWxlIjoiZXNfQ1UiLCJjbGllbnRfY291bnRyeV9jb2RlIjoiQ1UiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZXZpY2UnOmd0dCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGV2aWNlX2lkJzphZGlkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtZXRob2QiOiAiYXV0aC5sb2dpbiIsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImZiX2FwaV9yZXFfZnJpZW5kbHlfbmFtZSI6ICJhdXRoZW50aWNhdGUiLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmYl9hcGlfY2FsbGVyX2NsYXNzIjogImNvbS5mYWNlYm9vay5hY2NvdW50LmxvZ2luLnByb3RvY29sLkZiNGFBdXRoSGFuZGxlciJ9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWQgPSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbnRlbnQtdHlwZSc6J2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItc2ltLWhuaSc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNCw0ZTQpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLXR5cGUnOid1bmtub3duJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQXV0aG9yaXphdGlvbic6J09BdXRoIDM1MDY4NTUzMTcyOHw2MmY4Y2U5Zjc0YjEyZjg0YzEyM2NjMjM0MzdhNGEzMicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VzZXItYWdlbnQnOnVhX3N0cmluZywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1uZXQtaG5pJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU0LDRlNCkpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tYmFuZHdpZHRoJzpzdHIocmFuZG9tLnJhbmRpbnQoMmU3LDNlNykpLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWNvbm5lY3Rpb24tcXVhbGl0eSc6J0VYQ0VMTEVOVCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItZnJpZW5kbHktbmFtZSc6J2F1dGhlbnRpY2F0ZScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FjY2VwdC1lbmNvZGluZyc6J2d6aXAsIGRlZmxhdGUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWh0dHAtZW5naW5lJzogICAgICdMaWdlcid9DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA9ICdodHRwczovL2ItZ3JhcGguZmFjZWJvb2suY29tL2F1dGgvbG9naW4/aW5jbHVkZV9oZWFkZXJzPWZhbHNlJmRlY29kZV9ib2R5X2pzb249ZmFsc2Umc3RyZWFtYWJsZV9qc29uX3Jlc3BvbnNlPXRydWUnDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvID0gcmVxdWVzdHMucG9zdCh1cmwsZGF0YT1kYXRhLGhlYWRlcnM9aGVhZCxhbGxvd19yZWRpcmVjdHM9RmFsc2UpLnRleHQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcSA9IGpzb24ubG9hZHMocG8pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdzZXNzaW9uX2tleScgaW4gcToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnXHJcclwwMzNbMTszMm0gW01LSU5HLU9LXSAnK2lkcysnIHwgJytwYXMrJ1wwMzNbMTs5N20nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvQUtJTkctT0sudHh0JywnYScpLndyaXRlKGlkcysnfCcrcGFzKydcbicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiAnd3d3LmZhY2Vib29rLmNvbScgaW4gcVsnZXJyb3InXVsnbWVzc2FnZSddOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICd5JyBpbiBwY3A6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludCgnXHJcclx4MWJbMzg7NTsyMDhtIFtNS0lORy1DUF0gJytpZHMrJyB8ICcrcGFzKydcMDMzWzE7OTdtJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvTUtJTkctQ1AudHh0JywgJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3BzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuKCcvc2RjYXJkL01LSU5HLUNQLnR4dCcsJ2EnKS53cml0ZShpZHMrJ3wnK3BhcysnXG4nKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgbG9vcCs9MQ0KICAgICAgICAgICAgICAgIGV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMTApDQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgICAgICAgICAgcGFzcw0KZGVmIHJuZG0oaWRzLHBhc3NsaXN0KToNCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWwgb2ssbG9vcA0KICAgICAgICAgICAgICAgICAgICAgICAgc3lzLnN0ZG91dC53cml0ZSgnXHJcclwwMzNbMTszN20gW01LSU5HLVhEXSAlc3xcMDMzWzE7MzJtT0s6LSVzIFwwMzNbMTszN20nJShsb29wLGxlbihva3MpKSk7c3lzLnN0ZG91dC5mbHVzaCgpDQogICAgICAgICAgICAgICAgICAgICAgICBmb3IgcGFzIGluIHBhc3NsaXN0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWNhdGlvbl92ZXJzaW9uID0gc3RyKHJhbmRvbS5yYW5kaW50KDExMSw1NTUpKSsnLjAuMC4nK3N0cihyYW5kb20ucmFuZHJhbmdlKDksNDkpKStzdHIocmFuZG9tLnJhbmRpbnQoMTExLDU1NSkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9uX3ZlcnNpb25fY29kZT1zdHIocmFuZG9tLnJhbmRpbnQoMDAwMDAwMDAwLDk5OTk5OTk5OSkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZicz1yYW5kb20uY2hvaWNlKGZia3MpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGd0dD1yYW5kb20uY2hvaWNlKHh4eHh4KQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndHR0PXJhbmRvbS5jaG9pY2UoeHh4eHgpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZHJvaWRfdmVyc2lvbj1zdHIocmFuZG9tLnJhbmRyYW5nZSg2LDEzKSkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdWFfc3RyaW5nID0gZidEYXZpay8yLjEuMCAoTGludXg7IFU7IEFuZHJvaWQge3N0cihhbmRyb2lkX3ZlcnNpb24pfS4wLjA7IHtzdHIoZ3R0KX0gQnVpbGQve3N0cihndHR0KX0gW0ZCQU4vRkI0QTtGQkFWL3tzdHIoYXBwbGljYXRpb25fdmVyc2lvbil9O0ZCQlYve3N0cihhcHBsaWNhdGlvbl92ZXJzaW9uX2NvZGUpfTtGQkRNLycrJ3tkZW5zaXR5PTIuMCx3aWR0aD03MjAsaGVpZ2h0PTEyODB9OycrZidGQkxDL2VuX1VTO0ZCUlYve3N0cihhcHBsaWNhdGlvbl92ZXJzaW9uX2NvZGUpfTtGQkNSL01vdmlzdGFyO0ZCTUYvc2Ftc3VuZztGQkJEL3NhbXN1bmc7RkJQTi97c3RyKGZicyl9O0ZCRFYve3N0cihndHQpfTtGQlNWLzcuMDtGQk9QLzE7RkJDQS9hcm1lYWJpLXY3YTphcm1lYWJpO10nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZV9pZCA9IHN0cih1dWlkLnV1aWQ0KCkpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkaWQgPSBzdHIodXVpZC51dWlkNCgpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0geydhZGlkJzphZGlkLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbWFpbCc6aWRzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdwYXNzd29yZCc6cGFzLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjcGwnOid0cnVlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY3JlZGVudGlhbHNfdHlwZSc6J2RldmljZV9iYXNlZF9sb2dpbl9wYXNzd29yZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgInNvdXJjZSI6ICJkZXZpY2VfYmFzZWRfbG9naW4iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlcnJvcl9kZXRhaWxfdHlwZSc6J2J1dHRvbl93aXRoX2Rpc2FibGVkJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc291cmNlJzonbG9naW4nLCdmb3JtYXQnOidqc29uJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2VuZXJhdGVfc2Vzc2lvbl9jb29raWVzJzonMScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dlbmVyYXRlX2FuYWx5dGljc19jbGFpbSc6JzEnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnZW5lcmF0ZV9tYWNoaW5lX2lkJzonMScsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImxvY2FsZSI6ImVuX1VTIiwiY2xpZW50X2NvdW50cnlfY29kZSI6IlVTIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGV2aWNlJzpndHQsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RldmljZV9pZCc6YWRpZCwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibWV0aG9kIjogImF1dGgubG9naW4iLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJmYl9hcGlfcmVxX2ZyaWVuZGx5X25hbWUiOiAiYXV0aGVudGljYXRlIiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiZmJfYXBpX2NhbGxlcl9jbGFzcyI6ICJjb20uZmFjZWJvb2suYWNjb3VudC5sb2dpbi5wcm90b2NvbC5GYjRhQXV0aEhhbmRsZXIifQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb250ZW50LXR5cGUnOidhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLXNpbS1obmknOnN0cihyYW5kb20ucmFuZGludCgyZTQsNGU0KSksDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItY29ubmVjdGlvbi10eXBlJzondW5rbm93bicsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0F1dGhvcml6YXRpb24nOidPQXV0aCAzNTA2ODU1MzE3Mjh8NjJmOGNlOWY3NGIxMmY4NGMxMjNjYzIzNDM3YTRhMzInLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1c2VyLWFnZW50Jzp1YV9zdHJpbmcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3gtZmItbmV0LWhuaSc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNCw0ZTQpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLWJhbmR3aWR0aCc6c3RyKHJhbmRvbS5yYW5kaW50KDJlNywzZTcpKSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1jb25uZWN0aW9uLXF1YWxpdHknOidFWENFTExFTlQnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4LWZiLWZyaWVuZGx5LW5hbWUnOidhdXRoZW50aWNhdGUnLA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhY2NlcHQtZW5jb2RpbmcnOidnemlwLCBkZWZsYXRlJywNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneC1mYi1odHRwLWVuZ2luZSc6ICAgICAnTGlnZXInfQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgPSAnaHR0cHM6Ly9iLWFwaS5mYWNlYm9vay5jb20vbWV0aG9kL2F1dGgubG9naW4nDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvID0gcmVxdWVzdHMucG9zdCh1cmwsZGF0YT1kYXRhLGhlYWRlcnM9aGVhZCxhbGxvd19yZWRpcmVjdHM9RmFsc2UpLnRleHQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcSA9IGpzb24ubG9hZHMocG8pDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICdzZXNzaW9uX2tleScgaW4gcToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1aWQ9c3RyKHFbJ3VpZCddKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9raz1vcGVuKCcvc2RjYXJkL01LSU5HLU9LLnR4dCcsJ3InKS5yZWFkKCkNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHVpZCBpbiBva2s6cGFzcw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1xyXHJcMDMzWzE7MzJtIFtNS0lORy1PS10gJyt1aWQrJyB8ICcrcGFzKydcMDMzWzE7OTdtJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbignL3NkY2FyZC9NS0lORy1PSy50eHQnLCdhJykud3JpdGUodWlkKyd8JytwYXMrJ1xuJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tzLmFwcGVuZChpZHMpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0Og0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoJ1xyXHJcMDMzWzE7MzJtIFtNS0lORy1PS10gJyt1aWQrJyB8ICcrcGFzKydcMDMzWzE7OTdtJykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW4oJy9zZGNhcmQvTUtJTkctT0sudHh0JywnYScpLndyaXRlKHVpZCsnfCcrcGFzKydcbicpDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva3MuYXBwZW5kKGlkcykNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICAgICAgICAgIGxvb3ArPTENCiAgICAgICAgICAgICAgICBleGNlcHQgcmVxdWVzdHMuZXhjZXB0aW9ucy5Db25uZWN0aW9uRXJyb3I6DQogICAgICAgICAgICAgICAgICAgICAgICB0aW1lLnNsZWVwKDEwKQ0KICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KdHJ5Og0KICAgICAgICBtZW51KCkNCmV4Y2VwdCByZXF1ZXN0cy5leGNlcHRpb25zLkNvbm5lY3Rpb25FcnJvcjoNCiAgICAgICAgcHJpbnQoJ1xuIE5vIGludGVybmV0IGNvbm5lY3Rpb24gLi4uJykNCiAgICAgICAgZXhpdCgpDQpleGNlcHQgRXhjZXB0aW9uIGFzIGU6cGFzcw0KbWVudSgp'))
